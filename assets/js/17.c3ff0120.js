(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{367:function(t,r,a){t.exports=a.p+"assets/img/JavaScript-Prototype.c5ff09a6.png"},918:function(t,r,a){"use strict";a.r(r);var e=a(46),o=Object(e.a)({},(function(){var t=this,r=t.$createElement,e=t._self._c||r;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"javascript原型链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#javascript原型链"}},[t._v("#")]),t._v(" JavaScript原型链")]),t._v(" "),e("p",[e("img",{attrs:{src:a(367),alt:"JavaScript原型链"}})]),t._v(" "),e("h2",{attrs:{id:"原型和原型链"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#原型和原型链"}},[t._v("#")]),t._v(" 原型和原型链")]),t._v(" "),e("ul",[e("li",[e("p",[t._v("浏览器实现的"),e("code",[t._v("__proto__")]),t._v("，不是标准的规范，建议使用 "),e("code",[t._v("Object.getPrototypeOf()")]),t._v("，也可以使用 "),e("code",[t._v("p.constructor.prototype")]),t._v("的方式。")])]),t._v(" "),e("li",[e("p",[t._v("当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么它就会去它的原型对象里找这个属性，这个原型对象又 会有自己的原型，于是就这样一直找下去，也就是原型链的概念。原型链的尽头一般来说都是 "),e("code",[t._v("Object.prototype")]),t._v(" 所以这就 是我们新建的对象为什么能够使用 "),e("code",[t._v("toString()")]),t._v(" 等方法的原因。")])])])])}),[],!1,null,null,null);r.default=o.exports}}]);