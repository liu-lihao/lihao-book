(window.webpackJsonp=window.webpackJsonp||[]).push([[60],{452:function(v,_,t){"use strict";t.r(_);var e=t(46),o=Object(e.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h1",{attrs:{id:"iterator-迭代器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#iterator-迭代器"}},[v._v("#")]),v._v(" "),t("code",[v._v("Iterator")]),v._v(" 迭代器")]),v._v(" "),t("blockquote",[t("p",[v._v("ES6为了提供的类似其他语言的 "),t("code",[v._v("for...of")]),v._v(" 接口,其作用是遍历任何对象。于是设计了任何对象只要有"),t("code",[v._v("Symbol.iterator")]),v._v("属性，就是可遍历的。")])]),v._v(" "),t("p",[t("code",[v._v("Iterator")]),v._v("（迭代器）是一种接口，也可以说是一种规范。为各种不同的数据结构提供统一的访问机制。任何数据结构只要部署"),t("code",[v._v("Iterator")]),v._v("接口，就可以完成遍历操作（即依次处理该数据结构的所有成员）。")]),v._v(" "),t("p",[t("code",[v._v("[Symbol.iterator]")]),v._v(" 属性名是固定的写法，只要拥有了该属性的对象，就能够用迭代器的方式进行遍历。")]),v._v(" "),t("p",[v._v("迭代器的遍历方法是首先获得一个迭代器的指针，初始时该指针指向第一条数据之前，接着通过调用 "),t("code",[v._v("next")]),v._v(" 方法，改变指针的指向，让其指向下一条数据 每一次的 "),t("code",[v._v("next")]),v._v(" 都会返回一个对象，该对象有两个属性")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("value")]),v._v(" 代表想要获取的数据")]),v._v(" "),t("li",[t("code",[v._v("done")]),v._v(" 布尔值，"),t("code",[v._v("false")]),v._v(" 表示当前指针指向的数据有值，"),t("code",[v._v("true")]),v._v(" 表示遍历已经结束")])]),v._v(" "),t("p",[t("strong",[v._v("Iterator 的作用有三个：")])]),v._v(" "),t("ol",[t("li",[v._v("为各种数据结构，提供一个统一的、简便的访问接口；")]),v._v(" "),t("li",[v._v("使得数据结构的成员能够按某种次序排列；")]),v._v(" "),t("li",[v._v("ES6 创造了一种新的遍历命令for…of循环，Iterator 接口主要供for…of消费。")])]),v._v(" "),t("p",[t("strong",[v._v("遍历过程：")])]),v._v(" "),t("ol",[t("li",[v._v("创建一个指针对象，指向当前数据结构的起始位置。也就是说，遍历器对象本质上，就是一个指针对象。")]),v._v(" "),t("li",[v._v("第一次调用指针对象的next方法，可以将指针指向数据结构的第一个成员。")]),v._v(" "),t("li",[v._v("第二次调用指针对象的next方法，指针就指向数据结构的第二个成员。")]),v._v(" "),t("li",[v._v("不断调用指针对象的next方法，直到它指向数据结构的结束位置。")])]),v._v(" "),t("p",[t("strong",[v._v("原生具备 Iterator 接口的数据结构如下：")])]),v._v(" "),t("ul",[t("li",[v._v("Array")]),v._v(" "),t("li",[v._v("Map")]),v._v(" "),t("li",[v._v("Set")]),v._v(" "),t("li",[v._v("String")]),v._v(" "),t("li",[v._v("TypedArray")]),v._v(" "),t("li",[v._v("函数的 arguments 对象")]),v._v(" "),t("li",[v._v("NodeList 对象")])])])}),[],!1,null,null,null);_.default=o.exports}}]);