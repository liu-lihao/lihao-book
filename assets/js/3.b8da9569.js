(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{383:function(t,v,_){t.exports=_.p+"assets/img/HTTP-Main.e9ffe442.jpg"},384:function(t,v,_){t.exports=_.p+"assets/img/Request-Headers.1fe4c112.png"},385:function(t,v,_){t.exports=_.p+"assets/img/Response-Headers.cb0d1d2c.png"},386:function(t,v,_){t.exports=_.p+"assets/img/URI-Structure.ff41d020.png"},387:function(t,v,_){t.exports=_.p+"assets/img/Accept-Fields.aac269eb.png"},388:function(t,v,_){t.exports=_.p+"assets/img/HTTP-All-Version.621107f2.png"},535:function(t,v,_){"use strict";_.r(v);var a=_(46),e=Object(a.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"http体系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http体系"}},[t._v("#")]),t._v(" HTTP体系")]),t._v(" "),a("p",[t._v("不多说，上脑图：")]),t._v(" "),a("p",[a("img",{attrs:{src:_(383),alt:"HTTP脑图"}})]),t._v(" "),a("h2",{attrs:{id:"不得不提-tcp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不得不提-tcp"}},[t._v("#")]),t._v(" 不得不提 TCP")]),t._v(" "),a("p",[t._v("左转见 TCP 文档。")]),t._v(" "),a("h2",{attrs:{id:"报文结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#报文结构"}},[t._v("#")]),t._v(" 报文结构")]),t._v(" "),a("p",[t._v("区分 "),a("strong",[t._v("请求报文")]),t._v(" 和 "),a("strong",[t._v("响应报文")]),t._v("，但都符合如下结构：")]),t._v(" "),a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("起始行 + 头部 + 【空行】 + 实体\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"起始行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#起始行"}},[t._v("#")]),t._v(" 起始行")]),t._v(" "),a("p",[t._v("请求报文")]),t._v(" "),a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("GET /getInfo?id=66 HTTP/1.1\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("响应报文")]),t._v(" "),a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("HTTP/1.1 200 OK\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"头部"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#头部"}},[t._v("#")]),t._v(" 头部")]),t._v(" "),a("p",[t._v("请求头的字段非常多，涉及到很多 http 的特性，大体格式：")]),t._v(" "),a("ul",[a("li",[t._v("字段名不区分大小写")]),t._v(" "),a("li",[t._v("字段名不允许出现空格，不可以出现下划线 "),a("code",[t._v("_")])]),t._v(" "),a("li",[t._v("字段名后面必须"),a("strong",[t._v("紧接着 "),a("code",[t._v(":")])])])]),t._v(" "),a("p",[t._v("所在位置：")]),t._v(" "),a("p",[a("img",{attrs:{src:_(384),alt:"请求头"}})]),t._v(" "),a("p",[a("img",{attrs:{src:_(385),alt:"响应头"}})]),t._v(" "),a("h3",{attrs:{id:"空行"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空行"}},[t._v("#")]),t._v(" 空行")]),t._v(" "),a("p",[t._v("很重要，用来区分开 "),a("strong",[t._v("头部")]),t._v(" 和 "),a("strong",[t._v("实体")]),t._v("。")]),t._v(" "),a("p",[t._v("问: 如果说在头部中间故意加一个空行会怎么样？")]),t._v(" "),a("p",[t._v("那么"),a("strong",[t._v("空行后的内容全部被视为实体")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"实体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实体"}},[t._v("#")]),t._v(" 实体")]),t._v(" "),a("p",[t._v("就是具体的数据了，也就是 "),a("code",[t._v("body")]),t._v(" 部分。请求报文对应 "),a("strong",[t._v("请求体")]),t._v(", 响应报文对应 "),a("strong",[t._v("响应体")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"请求方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求方法"}},[t._v("#")]),t._v(" 请求方法")]),t._v(" "),a("p",[t._v("HTTP1.0 定义了三种请求方法： GET, POST 和 HEAD方法。")]),t._v(" "),a("p",[t._v("HTTP1.1 新增了六种请求方法：OPTIONS、PUT、PATCH、DELETE、TRACE 和 CONNECT 方法。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("序号")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("方法")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("描述")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("1*")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("GET")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("请求指定的页面信息，并返回实体主体。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("2")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("HEAD")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("类似于 GET 请求，只不过返回的响应中没有具体的内容，用于获取报头")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("3*")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("POST")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST 请求可能会导致新的资源的建立和/或已有资源的修改。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("4*")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("PUT")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("从客户端向服务器传送的数据取代指定的文档的内容。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("5*")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("DELETE")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("请求服务器删除指定的页面。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("6")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("CONNECT")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("HTTP/1.1 协议中预留给能够将连接改为管道方式的代理服务器。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("7*")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("OPTIONS")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("允许客户端查看服务器的性能。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("8")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("TRACE")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("回显服务器收到的请求，主要用于测试或诊断。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[t._v("9*")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("PATCH")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("是对 PUT 方法的补充，用来对已知资源进行局部更新 。")])])])]),t._v(" "),a("h2",{attrs:{id:"get-和-post-有什么区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-和-post-有什么区别"}},[t._v("#")]),t._v(" "),a("code",[t._v("GET")]),t._v(" 和 "),a("code",[t._v("POST")]),t._v(" 有什么区别？")]),t._v(" "),a("ul",[a("li",[t._v("语义。")]),t._v(" "),a("li",[t._v("从"),a("strong",[t._v("缓存")]),t._v("的角度，GET 请求会被浏览器主动缓存下来，留下历史记录，而 POST 默认不会。")]),t._v(" "),a("li",[t._v("从"),a("strong",[t._v("编码")]),t._v("的角度，GET 只能进行 URL 编码，只能接收 ASCII 字符，而 POST 没有限制。")]),t._v(" "),a("li",[t._v("从"),a("strong",[t._v("参数")]),t._v("的角度，GET 一般放在 URL 中，因此不安全，POST 放在请求体中，更适合传输敏感信息。")]),t._v(" "),a("li",[t._v("从"),a("strong",[t._v("幂等性")]),t._v("的角度，"),a("code",[t._v("GET")]),t._v("是"),a("strong",[t._v("幂等")]),t._v("的，而"),a("code",[t._v("POST")]),t._v("不是。("),a("code",[t._v("幂等")]),t._v("表示执行相同的操作，结果也是相同的)")]),t._v(" "),a("li",[t._v("从"),a("strong",[t._v("TCP")]),t._v("的角度，GET 请求会把请求报文一次性发出去，而 POST 会分为两个 TCP 数据包，首先发 header 部分，如果服务器响应 100(continue)， 然后发 body 部分。("),a("strong",[t._v("火狐")]),t._v("浏览器除外，它的 POST 请求只发一个 TCP 包)")])]),t._v(" "),a("h2",{attrs:{id:"如何理解-uri"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何理解-uri"}},[t._v("#")]),t._v(" 如何理解 URI？")]),t._v(" "),a("p",[t._v("全称为(Uniform Resource Identifier), 也就是"),a("strong",[t._v("统一资源标识符")])]),t._v(" "),a("p",[t._v("但是，它并不是我们常说的"),a("code",[t._v("网址")]),t._v(", 网址指的是"),a("code",[t._v("URL")]),t._v(", 实际上"),a("code",[t._v("URI")]),t._v("包含了"),a("code",[t._v("URN")]),t._v("和"),a("code",[t._v("URL")]),t._v("两个部分，由于 URL 过于普及，就默认将 URI 视为 URL 了。")]),t._v(" "),a("h3",{attrs:{id:"uri-的结构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uri-的结构"}},[t._v("#")]),t._v(" URI 的结构")]),t._v(" "),a("p",[a("img",{attrs:{src:_(386),alt:"URI结构"}})]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("scheme")]),t._v(": 表示协议名，比如"),a("code",[t._v("http")]),t._v(", "),a("code",[t._v("https")]),t._v(", "),a("code",[t._v("file")]),t._v("等等。后面必须和"),a("code",[t._v("://")]),t._v("连在一起。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("user:passwd@")]),t._v(": 表示登录主机时的用户信息，不过很不安全，不推荐使用，也不常用。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("host:port")]),t._v(": 表示主机名和端口。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("path")]),t._v(": 表示请求路径，标记资源所在位置。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("query")]),t._v(": 表示查询参数，为"),a("code",[t._v("key=val")]),t._v("这种形式，多个键值对之间用"),a("code",[t._v("&")]),t._v("隔开。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("fragment")]),t._v(": 表示 URI 所定位的资源内的一个"),a("strong",[t._v("锚点")]),t._v("，浏览器可以根据这个锚点跳转到对应的位置。")])])]),t._v(" "),a("p",[t._v("举个例子：")]),t._v(" "),a("div",{staticClass:"language-txt line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("https://www.baidu.com/s?wd=HTTP&rsv_spt=1\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("这个 URI 中，"),a("code",[t._v("https")]),t._v("即"),a("code",[t._v("scheme")]),t._v("部分，"),a("code",[t._v("www.baidu.com")]),t._v("为"),a("code",[t._v("host:port")]),t._v("部分（注意，http 和 https 的默认端口分别为80、443），"),a("code",[t._v("/s")]),t._v("为"),a("code",[t._v("path")]),t._v("部分，而"),a("code",[t._v("wd=HTTP&rsv_spt=1")]),t._v("就是"),a("code",[t._v("query")]),t._v("部分。")]),t._v(" "),a("h3",{attrs:{id:"uri-编码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#uri-编码"}},[t._v("#")]),t._v(" URI 编码")]),t._v(" "),a("p",[t._v("URI 只能使用"),a("code",[t._v("ASCII")]),t._v(", ASCII 之外的字符是不支持显示的，而且还有一部分符号是界定符，如果不加以处理就会导致解析出错。")]),t._v(" "),a("p",[t._v("因此，URI 引入了"),a("code",[t._v("编码")]),t._v("机制，将所有"),a("strong",[t._v("非 ASCII 码字符")]),t._v("和"),a("strong",[t._v("界定符")]),t._v("转为十六进制字节值，然后在前面加个"),a("code",[t._v("%")]),t._v("。也就是我们在前端项目常用的 "),a("code",[t._v("encodeURI()")]),t._v(" / "),a("code",[t._v("encodeURIComponent()")]),t._v(" / "),a("code",[t._v("decodeURI()")]),t._v(" / "),a("code",[t._v("decodeURIComponent()")]),t._v(" 方法。")]),t._v(" "),a("p",[t._v("如，空格被转义成了"),a("code",[t._v("%20")]),t._v("。")]),t._v(" "),a("h2",{attrs:{id:"比较http-0-9和http-1-0"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#比较http-0-9和http-1-0"}},[t._v("#")]),t._v(" 比较HTTP 0.9和HTTP 1.0")]),t._v(" "),a("ol",[a("li",[t._v("HTTP 0.9只是一个简单的协议，只有一个GET方法，没有首部，目标用来获取HTML。")]),t._v(" "),a("li",[t._v("HTTP 1.0协议大量内容：首部，响应码，重定向，错误，条件请求，内容编码等。")])]),t._v(" "),a("h2",{attrs:{id:"http-1-1的改进"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-1-1的改进"}},[t._v("#")]),t._v(" HTTP 1.1的改进")]),t._v(" "),a("p",[t._v("HTTP1.1 中浏览器再也不用为每个请求重新发起TCP连接( "),a("code",[t._v("connection: keep-alive")]),t._v(" )了，增加内容有：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("缓存相关头部的扩展")])]),t._v(" "),a("li",[a("p",[t._v("OPTIONS方法")]),t._v(" "),a("p",[t._v("用来查询针对请求URI指定的资源支持的方法")])]),t._v(" "),a("li",[a("p",[t._v("Upgrade 头部")]),t._v(" "),a("p",[t._v("切换到增强的协议类型，如 HTTP/2.0 或 WebSockets")])]),t._v(" "),a("li",[a("p",[t._v("Range请求")]),t._v(" "),a("p",[t._v("指定资源范围")])]),t._v(" "),a("li",[a("p",[t._v("压缩和传输编码")]),t._v(" "),a("p",[t._v("gzip")])]),t._v(" "),a("li",[a("p",[t._v("管道化")]),t._v(" "),a("p",[t._v("不用等待响应即可直接发送下一个请求")])])]),t._v(" "),a("h2",{attrs:{id:"http特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http特点"}},[t._v("#")]),t._v(" HTTP特点")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("灵活可扩展")]),t._v("，主要体现在两个方面。一个是语义上的自由，只规定了基本格式，比如空格分隔单词，换行分隔字段，其他的各个部分都没有严格的语法限制。另一个是传输形式的多样性，不仅仅可以传输文本，还能传输图片、视频等任意数据，非常方便。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("可靠传输")]),t._v("。HTTP 基于 TCP/IP，因此把这一特性继承了下来。这属于 TCP 的特性，不具体介绍了。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("请求-应答")]),t._v("。也就是"),a("code",[t._v("一发一收")]),t._v("、"),a("code",[t._v("有来有回")]),t._v("， 当然这个请求方和应答方不单单指客户端和服务器之间，如果某台服务器作为代理来连接后端的服务端，那么这台服务器也会扮演"),a("strong",[t._v("请求方")]),t._v("的角色。")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("无状态")]),t._v("。这里的状态是指"),a("strong",[t._v("通信过程的上下文信息")]),t._v("，而每次 http 请求都是独立、无关的，默认不需要保留状态信息。")])])]),t._v(" "),a("h3",{attrs:{id:"http缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http缺点"}},[t._v("#")]),t._v(" HTTP缺点")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("明文传输")]),t._v(" "),a("p",[t._v("即协议里的报文(主要指的是头部)不使用二进制数据，而是文本形式。")]),t._v(" "),a("p",[t._v("这当然对于调试提供了便利，但同时也让 HTTP 的报文信息暴露给了外界，给攻击者也提供了便利。"),a("code",[t._v("WIFI陷阱")]),t._v("就是利用 HTTP 明文传输的缺点，诱导你连上热点，然后疯狂抓你所有的流量，从而拿到你的敏感信息。")])]),t._v(" "),a("li",[a("p",[t._v("队头阻塞")]),t._v(" "),a("p",[t._v("当 http 开启长连接时，共用一个 TCP 连接，同一时刻只能处理一个请求，那么当前请求耗时过长的情况下，其它的请求只能处于阻塞状态，也就是著名的"),a("strong",[t._v("队头阻塞")]),t._v("问题。接下来会有一小节讨论这个问题。")])])]),t._v(" "),a("h2",{attrs:{id:"accept-系列字段"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#accept-系列字段"}},[t._v("#")]),t._v(" Accept 系列字段")]),t._v(" "),a("p",[t._v("四个部分: "),a("strong",[t._v("数据格式")]),t._v("、"),a("strong",[t._v("压缩方式")]),t._v("、"),a("strong",[t._v("支持语言")]),t._v("和"),a("strong",[t._v("字符集")]),t._v("。")]),t._v(" "),a("p",[a("img",{attrs:{src:_(387),alt:"Accept系列字段"}})]),t._v(" "),a("h3",{attrs:{id:"数据格式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据格式"}},[t._v("#")]),t._v(" 数据格式")]),t._v(" "),a("p",[t._v("接收端使用 "),a("code",[t._v("Accept")]),t._v(" ，体现在 "),a("code",[t._v("Content-Type")]),t._v(" 字段上。")]),t._v(" "),a("p",[t._v("取值如下：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("text： text/html, text/plain, text/css 等")])]),t._v(" "),a("li",[a("p",[t._v("image: image/gif, image/jpeg, image/png 等")])]),t._v(" "),a("li",[a("p",[t._v("audio/video: audio/mpeg, video/mp4 等")])]),t._v(" "),a("li",[a("p",[t._v("application: application/json, application/javascript, application/pdf, application/octet-stream")])])]),t._v(" "),a("h3",{attrs:{id:"压缩方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#压缩方式"}},[t._v("#")]),t._v(" 压缩方式")]),t._v(" "),a("p",[t._v("接收端使用 "),a("code",[t._v("Accept-Encoding")]),t._v(" ，体现在 "),a("code",[t._v("Content-Encoding")]),t._v(" 字段上。")]),t._v(" "),a("ul",[a("li",[t._v("gzip: 当今最流行的压缩格式")]),t._v(" "),a("li",[t._v("deflate: 另外一种著名的压缩格式")]),t._v(" "),a("li",[t._v("br: 一种专门为 HTTP 发明的压缩算法")])]),t._v(" "),a("h3",{attrs:{id:"支持语言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#支持语言"}},[t._v("#")]),t._v(" 支持语言")]),t._v(" "),a("p",[t._v("接收端使用 "),a("code",[t._v("Accept-Language")]),t._v(" ，体现在 "),a("code",[t._v("Content-Language")]),t._v(" 字段上。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 发送端")]),t._v("\nContent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Language"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" zh"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" zh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" en\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接收端")]),t._v("\nAccept"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Language"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" zh"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("CN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" zh"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" en\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h3",{attrs:{id:"字符集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符集"}},[t._v("#")]),t._v(" 字符集")]),t._v(" "),a("p",[t._v("接收端使用 "),a("code",[t._v("Accept-Charset")]),t._v(" ，体现在 "),a("code",[t._v("Content-Type")]),t._v(" 字段上。(注意没有 "),a("code",[t._v("Content-Charset")]),t._v(" )")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 发送端")]),t._v("\nContent"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Type"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" text"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("html"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" charset"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 接收端")]),t._v("\nAccept"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Charset"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" charset"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h2",{attrs:{id:"处理大文件传输"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#处理大文件传输"}},[t._v("#")]),t._v(" 处理大文件传输")]),t._v(" "),a("p",[t._v("如视频预览、大文件分块上传...")]),t._v(" "),a("p",[t._v("都是用的是 接收端："),a("code",[t._v("Range")]),t._v("、发送端： "),a("code",[t._v("Content-Range")])]),t._v(" "),a("h3",{attrs:{id:"告知客户端"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#告知客户端"}},[t._v("#")]),t._v(" 告知客户端")]),t._v(" "),a("p",[t._v("首先服务端向客户端发送")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Accept"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("Ranges"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" none\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("用来告知客户端这边是支持范围请求的。")]),t._v(" "),a("h3",{attrs:{id:"客户端发起"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#客户端发起"}},[t._v("#")]),t._v(" 客户端发起")]),t._v(" "),a("p",[t._v("客户端发起指定范围的请求，格式如下："),a("code",[t._v("bytes=x-y")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 单段数据")]),t._v("\nRange"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bytes"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 30- 表示从30到终点")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// -30 表示从起点到30")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 多段数据")]),t._v("\nRange"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bytes"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("30")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("39")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h3",{attrs:{id:"服务端响应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#服务端响应"}},[t._v("#")]),t._v(" 服务端响应")]),t._v(" "),a("p",[t._v("服务器收到请求之后，首先验证范围"),a("strong",[t._v("是否合法")]),t._v("，如果越界了那么返回"),a("code",[t._v("416")]),t._v("错误码，否则读取相应片段，返回"),a("code",[t._v("206")]),t._v("状态码。")]),t._v(" "),a("h2",{attrs:{id:"http处理表单数据提交"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http处理表单数据提交"}},[t._v("#")]),t._v(" HTTP处理表单数据提交")]),t._v(" "),a("p",[t._v("主要体现在两种不同的 "),a("code",[t._v("Content-Type")]),t._v(" 取值:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("application/x-www-form-urlencoded")]),t._v(" "),a("ul",[a("li",[t._v("其中的数据会被编码成以"),a("code",[t._v("&")]),t._v("分隔的键值对")]),t._v(" "),a("li",[t._v("字符以"),a("strong",[t._v("URL编码方式")]),t._v("编码。")])])]),t._v(" "),a("li",[a("code",[t._v("multipart/form-data")]),t._v(" "),a("ul",[a("li",[t._v("请求头中的"),a("code",[t._v("Content-Type")]),t._v("字段会包含"),a("code",[t._v("boundary")]),t._v("，且"),a("code",[t._v("boundary")]),t._v("的值有浏览器默认指定。例: "),a("code",[t._v("Content-Type: multipart/form-data;boundary=----WebkitFormBoundaryRRJKeWfHPGrS4LKe")]),t._v("。")]),t._v(" "),a("li",[t._v("数据会分为多个部分，每两个部分之间通过分隔符来分隔，每部分表述均有 HTTP 头部描述子包体，如"),a("code",[t._v("Content-Type")]),t._v("，在最后的分隔符会加上"),a("code",[t._v("--")]),t._v("表示结束。")])])])]),t._v(" "),a("p",[a("strong",[t._v("总结")]),t._v("：")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("multipart/form-data")]),t._v(" 格式最大的特点在于:"),a("strong",[t._v("每一个表单元素都是独立的资源表述")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("对于图片等文件的上传，基本采用"),a("code",[t._v("multipart/form-data")]),t._v("，因为没必要对文件进行URL编码。")])])]),t._v(" "),a("h2",{attrs:{id:"http1-1-如何解决-http-队头阻塞问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http1-1-如何解决-http-队头阻塞问题"}},[t._v("#")]),t._v(" HTTP1.1 如何解决 HTTP 队头阻塞问题")]),t._v(" "),a("p",[a("strong",[t._v("为什么会造成队头阻塞？")])]),t._v(" "),a("p",[t._v("HTTP 传输是基于"),a("code",[t._v("请求-应答")]),t._v("的模式进行的，报文必须是一发一收，但值得注意的是，里面的任务被放在一个任务队列中串行执行，一旦队首的请求处理太慢，就会阻塞后面请求的处理。这就是著名的"),a("code",[t._v("HTTP队头阻塞")]),t._v("问题。")]),t._v(" "),a("p",[a("strong",[t._v("解决方式：")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("并发链接")]),t._v(" "),a("p",[t._v("Chrome 中是 6 个。")])]),t._v(" "),a("li",[a("p",[t._v("域名分片")]),t._v(" "),a("p",[t._v("一个域名不是可以并发 6 个长连接吗？那我就多分几个域名。（比如：c1.xx.com 、c2.xx.com。）")])])]),t._v(" "),a("h2",{attrs:{id:"cookie-相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie-相关"}},[t._v("#")]),t._v(" Cookie 相关")]),t._v(" "),a("p",[t._v("Cookie 相当于为 HTTP 添加了状态。")]),t._v(" "),a("h3",{attrs:{id:"作用域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),a("p",[t._v("关于作用域也有两个属性: "),a("strong",[t._v("Domain")]),t._v("和"),a("strong",[t._v("path")]),t._v(", 给 "),a("strong",[t._v("Cookie")]),t._v(" 绑定了域名和路径，在发送请求之前，发现域名或者路径和这两个属性不匹配，那么就不会带上 Cookie。值得注意的是，对于路径来说，"),a("code",[t._v("/")]),t._v("表示域名下的任意路径都允许使用 Cookie。")]),t._v(" "),a("h3",{attrs:{id:"安全相关"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安全相关"}},[t._v("#")]),t._v(" 安全相关")]),t._v(" "),a("p",[t._v("如果带上"),a("code",[t._v("Secure")]),t._v("，说明只能通过 HTTPS 传输 cookie。")]),t._v(" "),a("p",[t._v("如果 cookie 字段带上"),a("code",[t._v("HttpOnly")]),t._v("，那么说明只能通过 HTTP 协议传输，不能通过 JS 访问，这也是预防 XSS 攻击的重要手段。")]),t._v(" "),a("p",[t._v("相应的，对于 CSRF 攻击的预防，也有"),a("code",[t._v("SameSite")]),t._v("属性。")]),t._v(" "),a("p",[a("code",[t._v("SameSite")]),t._v("可以设置为三个值，"),a("code",[t._v("Strict")]),t._v("、"),a("code",[t._v("Lax")]),t._v("和"),a("code",[t._v("None")]),t._v("。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("在"),a("code",[t._v("Strict")]),t._v("模式下，浏览器完全禁止第三方请求携带Cookie。比如请求"),a("code",[t._v("sanyuan.com")]),t._v("网站只能在"),a("code",[t._v("sanyuan.com")]),t._v("域名当中请求才能携带 Cookie，在其他网站请求都不能。")])]),t._v(" "),a("li",[a("p",[t._v("在"),a("code",[t._v("Lax")]),t._v("模式，就宽松一点了，但是只能在 "),a("code",[t._v("get 方法提交表单")]),t._v("况或者"),a("code",[t._v("a 标签发送 get 请求")]),t._v("的情况下可以携带 Cookie，其他情况均不能。")])]),t._v(" "),a("li",[a("p",[t._v("在"),a("code",[t._v("None")]),t._v("模式下，也就是默认模式，请求会自动携带上 Cookie。")])])]),t._v(" "),a("h3",{attrs:{id:"cookie-的缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie-的缺点"}},[t._v("#")]),t._v(" Cookie 的缺点")]),t._v(" "),a("ol",[a("li",[t._v("容量缺陷。Cookie 的体积上限只有"),a("code",[t._v("4KB")]),t._v("，只能用来存储少量的信息。")]),t._v(" "),a("li",[t._v("性能缺陷。Cookie 紧跟域名，不管域名下面的某一个地址需不需要这个 Cookie ，请求都会携带上完整的 Cookie，这样随着请求数的增多，其实会造成巨大的性能浪费的，因为请求携带了很多不必要的内容。但可以通过"),a("code",[t._v("Domain")]),t._v("和"),a("code",[t._v("Path")]),t._v("指定"),a("strong",[t._v("作用域")]),t._v("来解决。")]),t._v(" "),a("li",[t._v("安全缺陷。由于 Cookie 以纯文本的形式在浏览器和服务器中传递，很容易被非法用户截获，然后进行一系列的篡改，在 Cookie 的有效期内重新发送给服务器，这是相当危险的。另外，在"),a("code",[t._v("HttpOnly")]),t._v("为 false 的情况下，Cookie 信息能直接通过 JS 脚本来读取。")])]),t._v(" "),a("h2",{attrs:{id:"http-代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-代理"}},[t._v("#")]),t._v(" HTTP 代理")]),t._v(" "),a("p",[t._v("引入代理之后，作为代理的服务器相当于一个中间人的角色，对于客户端而言，表现为服务器进行响应；而对于源服务器，表现为客户端发起请求，具有"),a("strong",[t._v("双重身份")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"功能"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#功能"}},[t._v("#")]),t._v(" 功能")]),t._v(" "),a("ol",[a("li",[a("strong",[t._v("负载均衡")]),t._v("。客户端的请求只会先到达代理服务器，后面到底有多少源服务器，IP 都是多少，客户端是不知道的。因此，这个代理服务器可以拿到这个请求之后，可以通过特定的算法分发给不同的源服务器，让各台源服务器的负载尽量平均。当然，这样的算法有很多，包括"),a("strong",[t._v("随机算法")]),t._v("、"),a("strong",[t._v("轮询")]),t._v("、"),a("strong",[t._v("一致性hash")]),t._v("、"),a("strong",[t._v("LRU")]),a("code",[t._v("(最近最少使用)")]),t._v("等等。")]),t._v(" "),a("li",[a("strong",[t._v("保障安全")]),t._v("。利用"),a("strong",[t._v("心跳")]),t._v("机制监控后台的服务器，一旦发现故障机就将其踢出集群。并且对于上下行的数据进行过滤，对非法 IP 限流，这些都是代理服务器的工作。")]),t._v(" "),a("li",[a("strong",[t._v("缓存代理")]),t._v("。将内容缓存到代理服务器，使得客户端可以直接从代理服务器获得而不用到源服务器那里。下一节详细拆解。")])]),t._v(" "),a("h3",{attrs:{id:"相关头部"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#相关头部"}},[t._v("#")]),t._v(" 相关头部")]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("Via")])]),t._v(" "),a("p",[t._v("标明身份，留下痕迹。如："),a("code",[t._v("Via: proxy_server2, proxy_server1")])])]),t._v(" "),a("li",[a("p",[a("code",[t._v("X-Forwarded-For")])]),t._v(" "),a("p",[t._v("为谁转发，记录 "),a("strong",[t._v("请求方")]),t._v(" 的 "),a("code",[t._v("IP")]),t._v(" 。")])]),t._v(" "),a("li",[a("p",[a("code",[t._v("X-Real-IP")])]),t._v(" "),a("p",[t._v("记录 "),a("strong",[t._v("客户端")]),t._v(" 的真实 "),a("code",[t._v("IP")]),t._v(" 。")])])]),t._v(" "),a("blockquote",[a("p",[t._v("X-Forwarded-For产生的问题：\nX-Forwarded-For这个字段记录的是请求方的 IP，这意味着每经过一个不同的代理，这个字段的名字都要变，从客户端到代理1，这个字段是客户端的 IP，从代理1到代理2，这个字段就变为了代理1的 IP。")]),t._v(" "),a("ol",[a("li",[t._v("意味着代理必须解析 HTTP 请求头，然后修改，比直接转发数据性能下降。")]),t._v(" "),a("li",[t._v("在 HTTPS 通信加密的过程中，原始报文是不允许修改的。\n由此产生了 "),a("em",[t._v("代理协议")]),t._v("，一般使用明文版本，只需要在 HTTP 请求行上面加上这样格式的文本即可:")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// PROXY + TCP4/TCP6 + 请求方地址 + 接收方地址 + 请求端口 + 接收端口")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("PROXY")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("TCP4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".0")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v(".2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1111")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2222")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("GET")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTTP")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.1")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])])]),t._v(" "),a("h3",{attrs:{id:"jsonp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsonp"}},[t._v("#")]),t._v(" JSONP")]),t._v(" "),a("p",[t._v("利用标签的 "),a("code",[t._v("scr")]),t._v(" 支持跨域的特性，来实现 "),a("code",[t._v("get")]),t._v(" 请求。")]),t._v(" "),a("h2",{attrs:{id:"https安全在哪"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#https安全在哪"}},[t._v("#")]),t._v(" HTTPS安全在哪")]),t._v(" "),a("p",[t._v("HTTPS并不是一个新的协议, 它在"),a("code",[t._v("HTTP")]),t._v("和"),a("code",[t._v("TCP")]),t._v("的传输中建立了一个安全层，利用"),a("code",[t._v("对称加密")]),t._v("和"),a("code",[t._v("非对称机密")]),t._v("结合数字证书认证的方式，让传输过程的安全性大大提高。")]),t._v(" "),a("p",[t._v("在 HTTP 下面增加了一层 SSL/TLS 协议，简单的讲，"),a("strong",[t._v("HTTPS = HTTP + SSL/TLS")]),t._v("。")]),t._v(" "),a("p",[t._v("大体流程：")]),t._v(" "),a("ol",[a("li",[t._v("浏览器向服务器发送"),a("code",[t._v("client_random")]),t._v("和加密方法列表。")]),t._v(" "),a("li",[t._v("服务器接收到，返回"),a("code",[t._v("server_random")]),t._v("、加密方法以及公钥。")]),t._v(" "),a("li",[t._v("浏览器接收，接着生成另一个随机数"),a("code",[t._v("pre_random")]),t._v(", 并且用公钥加密，传给服务器。(敲黑板！重点操作！)")]),t._v(" "),a("li",[t._v("服务器用公钥解密这个被加密后的"),a("code",[t._v("pre_random")]),t._v("。")])]),t._v(" "),a("p",[t._v("现在浏览器和服务器有三样相同的凭证:"),a("code",[t._v("client_random")]),t._v("、"),a("code",[t._v("server_random")]),t._v("和"),a("code",[t._v("pre_random")]),t._v("。然后两者用相同的加密方法混合这三个随机数，生成最终的"),a("code",[t._v("密钥")]),t._v("。")]),t._v(" "),a("p",[t._v("然后浏览器和服务器尽管用一样的密钥进行通信，即使用"),a("code",[t._v("对称加密")]),t._v("。")]),t._v(" "),a("p",[t._v("这个最终的密钥是很难被中间人拿到的，为什么呢? 因为中间人没有私钥，从而"),a("strong",[t._v("拿不到pre_random")]),t._v("，也就无法生成最终的密钥了。")]),t._v(" "),a("p",[t._v("回头比较一下和单纯的使用"),a("strong",[t._v("非对称加密")]),t._v(", 这种方式做了什么改进呢？本质上是"),a("strong",[t._v("防止了私钥加密的数据外传")]),t._v("。单独使用"),a("strong",[t._v("非对称加密")]),t._v("，最大的漏洞在于服务器传数据给浏览器只能用"),a("code",[t._v("私钥")]),t._v("加密，这是危险产生的根源。利用"),a("code",[t._v("对称和非对称")]),t._v("加密结合的方式，就防止了这一点，从而保证了安全。")]),t._v(" "),a("h2",{attrs:{id:"http2-的改进"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http2-的改进"}},[t._v("#")]),t._v(" HTTP2 的改进")]),t._v(" "),a("p",[t._v("性能提升：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("头部压缩")]),t._v(" "),a("p",[t._v("采用 "),a("strong",[t._v("HPack算法")]),t._v(" 对请求头压缩。（1、对请求头字段建哈希表，下次只需传输索引即可；2、对整数、字符串进行 "),a("strong",[t._v("哈弗曼编码")]),t._v("）")])]),t._v(" "),a("li",[a("p",[t._v("多路复用")]),t._v(" "),a("p",[t._v("把报文全部转为二进制格式（各个部分被拆分为xx帧，如："),a("em",[t._v("Headers帧")]),t._v("），HTTP/2 用 "),a("strong",[t._v("流")]),t._v(" 来在一个 TCP 连接上来进行多个数据帧的通信（在服务端会重新组装）。通过其他字段还实现了 "),a("strong",[t._v("优先级")]),t._v(" 、 "),a("strong",[t._v("流量控制")]),t._v(" 等功能。")])])]),t._v(" "),a("p",[t._v("颠覆性的功能实现：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("设置请求优先级")]),t._v(" "),a("p",[t._v("每个资源都获取一个stream ID来标识连接上的资源，并且有三个参数用于定义资源优先级：")]),t._v(" "),a("ol",[a("li",[t._v("父级数据流(Parent Stream)：这个数据流是一个“依赖”资源或者应该在之后被传递的数据流。有一个所有数据流共享的虚拟root stream 0。")]),t._v(" "),a("li",[t._v("权重(Weight)：1到256之间的数字，用于标识在多个数据流共享连接时分配给此数据流的带宽量。带宽是相对于所有其他活动的数据流的权重分配的，而不是绝对值。")]),t._v(" "),a("li",[t._v("独占位(Exclusive bit)：一个标志，表示应该在不与任何其他数据流共享带宽的情况下下载。")])])]),t._v(" "),a("li",[a("p",[t._v("服务器推送")]),t._v(" "),a("p",[t._v("使服务器也能新建 stream 来给客户端发送消息，当 TCP 连接建立之后，比如浏览器请求一个 HTML 文件，服务器就可以在返回 HTML 的基础上，将 HTML 中引用到的其他资源文件一起返回给客户端，减少客户端的等待。")])])]),t._v(" "),a("blockquote",[a("p",[a("strong",[t._v("流")]),t._v(" 的特性：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("并发性。一个 HTTP/2 连接上可以同时发多个帧，这一点和 HTTP/1 不同。这也是实现"),a("strong",[t._v("多路")]),t._v("复用的基础。")])]),t._v(" "),a("li",[a("p",[t._v("自增性。流 ID 是不可重用的，而是会按顺序递增，达到上限之后又新开 TCP 连接从头开始。")])]),t._v(" "),a("li",[a("p",[t._v("双向性。客户端和服务端都可以创建流，互不干扰，双方都可以作为"),a("code",[t._v("发送方")]),t._v("或者"),a("code",[t._v("接收方")]),t._v("。")])]),t._v(" "),a("li",[a("p",[t._v("可设置优先级。可以设置数据帧的优先级，让服务端先处理重要资源，优化用户体验。")])])])]),t._v(" "),a("h2",{attrs:{id:"http2-多路复用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http2-多路复用"}},[t._v("#")]),t._v(" HTTP2 多路复用")]),t._v(" "),a("p",[t._v("在 HTTP/1 中，每次请求都会建立一次HTTP连接，也就是我们常说的3次握手4次挥手，这个过程在一次请求过程中占用了相当长的时间，即使开启了 "),a("code",[t._v("Keep-Alive")]),t._v(" ，解决了多次连接的问题，但是依然有两个效率上的问题：")]),t._v(" "),a("ul",[a("li",[t._v("第一个："),a("strong",[t._v("串行的文件传输")]),t._v("。当请求a文件时，b文件只能等待，等待a连接到服务器、服务器处理文件、服务器返回文件，这三个步骤。我们假设这三步用时都是1秒，那么a文件用时为3秒，b文件传输完成用时为6秒，依此类推。（注：此项计算有一个前提条件，就是浏览器和服务器是单通道传输）")]),t._v(" "),a("li",[t._v("第二个：连接数过多。我们假设Apache设置了最大并发数为300，因为浏览器限制，浏览器发起的最大请求数为6，也就是服务器能承载的最高并发为50，当第51个人访问时，就需要等待前面某个请求处理完成。")])]),t._v(" "),a("p",[t._v("HTTP/2的多路复用就是为了解决上述的两个性能问题。\n在 HTTP/2 中，有两个非常重要的概念，分别是 "),a("strong",[t._v("帧（frame）")]),t._v(" 和 "),a("strong",[t._v("流（stream）")]),t._v(" 。\n帧代表着最小的数据单位，每个帧会标识出该帧属于哪个流，流也就是多个帧组成的数据流。\n多路复用，就是"),a("strong",[t._v("在一个 TCP 连接中可以存在多条流")]),t._v("。换句话说，也就是可以发送多个请求，对端可以"),a("strong",[t._v("通过帧中的标识知道属于哪个请求")]),t._v("。通过这个技术，可以避免 HTTP 旧版本中的队头阻塞问题，极大的提高传输性能。")]),t._v(" "),a("h2",{attrs:{id:"http个版本分层图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http个版本分层图"}},[t._v("#")]),t._v(" HTTP个版本分层图：")]),t._v(" "),a("p",[a("img",{attrs:{src:_(388),alt:"HTTP各版本分层图"}})])])}),[],!1,null,null,null);v.default=e.exports}}]);